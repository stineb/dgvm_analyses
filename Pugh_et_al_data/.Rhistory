if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_CAX.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_DAN.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
rm(list = ls())
library(dplyr)
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
filename<-'E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_DAN.csv'
Mother_CSV<-read.csv(filename,check.names=FALSE)
my_comment<-'ingrowth_core_num is NA, filled with 100.'
#the below line is used to remove an empty column at the end of the csv file, this is due to
#https://stackoverflow.com/questions/10441437/why-am-i-getting-x-in-my-column-names-when-reading-a-data-frame
if(colnames(Mother_CSV)[length(Mother_CSV)]==""){Mother_CSV<-Mother_CSV[,-length(Mother_CSV)]}
#This line would check whether the column name for plot code is called "plot_code", otherwise, it asked the name for that column
if (is.null(Mother_CSV$comments)) {my.name <- readline(prompt="plot code column header: ")}
for (ii in 1:nrow(Mother_CSV)){
if(is.na(Mother_CSV[nrow,'ingrowth_core_num'])){
Mother_CSV[nrow,'ingrowth_core_num']<-100
Mother_CSV_comment<-Mother_CSV$comments[ii]
new_comment<-paste(Mother_CSV_comment,', ',my_comment,sep='')
Mother_CSV$comments[ii]<-new_comment
}
}
for (ii in 1:nrow(Mother_CSV)){
if(is.na(Mother_CSV[ii,'ingrowth_core_num'])){
Mother_CSV[ii,'ingrowth_core_num']<-100
Mother_CSV_comment<-Mother_CSV$comments[ii]
new_comment<-paste(Mother_CSV_comment,', ',my_comment,sep='')
Mother_CSV$comments[ii]<-new_comment
}
}
write.csv(Mother_CSV,file = paste0(tools::file_path_sans_ext(filename),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_ESP.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_IVI.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_JEN.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_KEN.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_KOG.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_LPG.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_MLA.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
filename<-'E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_MLA.csv'
Mother_CSV<-read.csv(filename,check.names=FALSE)
my_comment<-'ingrowth_core_num is NA, filled with 100.'
#the below line is used to remove an empty column at the end of the csv file, this is due to
#https://stackoverflow.com/questions/10441437/why-am-i-getting-x-in-my-column-names-when-reading-a-data-frame
if(colnames(Mother_CSV)[length(Mother_CSV)]==""){Mother_CSV<-Mother_CSV[,-length(Mother_CSV)]}
#This line would check whether the column name for plot code is called "plot_code", otherwise, it asked the name for that column
if (is.null(Mother_CSV$comments)) {my.name <- readline(prompt="plot code column header: ")}
for (ii in 1:nrow(Mother_CSV)){
if(is.na(Mother_CSV[ii,'ingrowth_core_num'])){
Mother_CSV[ii,'ingrowth_core_num']<-100
Mother_CSV_comment<-Mother_CSV$comments[ii]
new_comment<-paste(Mother_CSV_comment,', ',my_comment,sep='')
Mother_CSV$comments[ii]<-new_comment
}
}
write.csv(Mother_CSV,file = paste0(tools::file_path_sans_ext(filename),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_MNG.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_MPR.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
filename<-'E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_MPR.csv'
Mother_CSV<-read.csv(filename,check.names=FALSE)
my_comment<-'plot_code is MPR-, filled with MPR-00'
#the below line is used to remove an empty column at the end of the csv file, this is due to
#https://stackoverflow.com/questions/10441437/why-am-i-getting-x-in-my-column-names-when-reading-a-data-frame
if(colnames(Mother_CSV)[length(Mother_CSV)]==""){Mother_CSV<-Mother_CSV[,-length(Mother_CSV)]}
#This line would check whether the column name for plot code is called "plot_code", otherwise, it asked the name for that column
if (is.null(Mother_CSV$comments)) {my.name <- readline(prompt="plot code column header: ")}
for (ii in 1:nrow(Mother_CSV)){
if(Mother_CSV[ii,'plot_code']=='MPR-'){
Mother_CSV[ii,'plot_code']<-'MPR-00'
Mother_CSV_comment<-Mother_CSV$comments[ii]
new_comment<-paste(Mother_CSV_comment,', ',my_comment,sep='')
Mother_CSV$comments[ii]<-new_comment
}
}
write.csv(Mother_CSV,file = paste0(tools::file_path_sans_ext(filename),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20201201_NXV_new.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_PAN.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_SAF.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##----------------------------------------------------------------
##                      set file directory here                  -
##----------------------------------------------------------------
filename<-'E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_SAF.csv'
Mother_CSV<-read.csv(filename,check.names=FALSE)
my_comment<-'ingrowth_core_num is NA, fill with 100'
#the below line is used to remove an empty column at the end of the csv file, this is due to
#https://stackoverflow.com/questions/10441437/why-am-i-getting-x-in-my-column-names-when-reading-a-data-frame
if(colnames(Mother_CSV)[length(Mother_CSV)]==""){Mother_CSV<-Mother_CSV[,-length(Mother_CSV)]}
#This line would check whether the column name for plot code is called "plot_code", otherwise, it asked the name for that column
if (is.null(Mother_CSV$comments)) {my.name <- readline(prompt="plot code column header: ")}
for (ii in 1:nrow(Mother_CSV)){
if(is.na(Mother_CSV[ii,'ingrowth_core_num'])){
Mother_CSV[ii,'ingrowth_core_num']<-'100'
Mother_CSV_comment<-Mother_CSV$comments[ii]
new_comment<-paste(Mother_CSV_comment,', ',my_comment,sep='')
Mother_CSV$comments[ii]<-new_comment
}
}
write.csv(Mother_CSV,file = paste0(tools::file_path_sans_ext(filename),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_SPD.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_STB.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
##-------------------------
##  read file and replace
##-------------------------
library(dplyr)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_TAM.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_TAN.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_TRU.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
My_file<- "E:/RawData_for_database/what_I_need_to_upload/output_ic/ic_imported_20191107_WAY.csv"
csv_before_filling<-read.csv(My_file)
for (rownumber in 1:nrow(csv_before_filling)){
if (isTRUE(csv_before_filling[rownumber,'time_step']>=6)){
temp_num<-csv_before_filling[rownumber,'time_step_minutes']
csv_before_filling[rownumber,'time_step_minutes']<-csv_before_filling[rownumber,'time_step']
csv_before_filling[rownumber,'time_step']<-temp_num
print(paste0('modify', rownumber))
}
if (isTRUE(csv_before_filling[rownumber,'quality_code']=='poor')){csv_before_filling[rownumber,'quality_code']<-'not_sure'}
}
write.csv(csv_before_filling,file = paste0(tools::file_path_sans_ext(My_file),'_HYZ.csv'),fileEncoding = "UTF-8",row.names = F)
setwd("F:/Side_project/Beni/dgvm_analyses/Pugh_et_al_data/")
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf.rda")
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf.rda")
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf.RData")
source("Processed_data/df_to_grid.R")
rotate_matrix <- function(x) apply(t(x), 2, rev)
suppressMessages(library(raster))
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_init)%>%
df_to_grid(varnam = "npp_init")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
plot(map_kg_m2)
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_init<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_final)%>%
df_to_grid(varnam = "npp_final")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')  ,xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_final<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
print(paste("model name:",gdf$modl[model_num],"npp_init",round(npp_sum_init),"npp_sum_final",round(npp_sum_final)))
print(dim(npp_init))
}
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
library(readr)
library(stringr)
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf.RData")
source("Processed_data/df_to_grid.R")
rotate_matrix <- function(x) apply(t(x), 2, rev)
suppressMessages(library(raster))
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_init)%>%
df_to_grid(varnam = "npp_init")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
plot(map_kg_m2)
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_init<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_final)%>%
df_to_grid(varnam = "npp_final")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')  ,xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_final<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
print(paste("model name:",gdf$modl[model_num],"npp_init",round(npp_sum_init),"npp_sum_final",round(npp_sum_final)))
print(dim(npp_init))
}
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf.RData")
source("Processed_data/df_to_grid.R")
rotate_matrix <- function(x) apply(t(x), 2, rev)
suppressMessages(library(raster))
par(mfrow=c(2,3))
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_init)%>%
df_to_grid(varnam = "npp_init")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
plot(map_kg_m2)
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_init<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_final)%>%
df_to_grid(varnam = "npp_final")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')  ,xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_final<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
print(paste("model name:",gdf$modl[model_num],"npp_init",round(npp_sum_init),"npp_sum_final",round(npp_sum_final)))
print(dim(npp_init))
}
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(csoil_change,npp_final)%>%
mutate(Beni_checker=csoil_change/npp_final)%>%
dplyr::select(Beni_checker)
colnames(npp_init)<-gdf$modl[[model_num]]
print(gdf$modl[[model_num]])
print(npp_init[,1] %>% quantile(., probs = c(0.1, 0.5, 0.9), na.rm=T))
}
# availvars <- read_csv( "E:/Cesar_project_csoil/Trendy_v8_beni/dgvm_analyses-master/availvars_trendy_v8_S1.csv" )
setwd("F:/Side_project/Beni/dgvm_analyses/CMIP5") #This is the directory of this rmd file
##::::::::::::::::::::::::::::
##  check globally total NPP
##::::::::::::::::::::::::::::
load("Processed_data/gdf_CMIP5.rda")
source("Processed_data/df_to_grid.R")
rotate_matrix <- function(x) apply(t(x), 2, rev)
suppressMessages(library(raster))
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_init)%>%
df_to_grid(varnam = "npp_init")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs'),xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
plot(map_kg_m2)
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_init<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(lon,lat,npp_final)%>%
df_to_grid(varnam = "npp_final")%>%
rotate_matrix()
map_kg_m2 <-raster::raster(npp_init,crs=sp::CRS('+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')  ,xmn=0, xmx=360,
ymn=-90, ymx=+90) #unit: kg/m2, it was kg/m2/s but has been converted in collect_gdf_bymodl.R
a <- raster::area(map_kg_m2)
map_MgPixel <- map_kg_m2 * a * 1000000 #convert /s to /year and convert km2 to m2
npp_sum_final<-cellStats(map_MgPixel,"sum", na.rm=T) * 10^(-12) #from kg to Pg
print(paste("model name:",gdf$modl[model_num],"npp_init",round(npp_sum_init),"npp_sum_final",round(npp_sum_final)))
print(dim(npp_init))
}
for (model_num in 1:nrow(gdf)){
npp_init<-gdf$data[[model_num]]%>%
dplyr::select(csoil_change,npp_final)%>%
mutate(Beni_checker=csoil_change/npp_final)%>%
dplyr::select(Beni_checker)
colnames(npp_init)<-gdf$modl[[model_num]]
print(gdf$modl[[model_num]])
print(npp_init[,1] %>% quantile(., probs = c(0.1, 0.5, 0.9), na.rm=T))
}
